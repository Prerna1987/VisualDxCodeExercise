// Generated by Dagger (https://dagger.dev).
package com.visualdx.codechallenge.fragments;

import com.visualdx.codechallenge.repository.MyCurrencyModelFactory;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeFragment_MembersInjector implements MembersInjector<HomeFragment> {
  private final Provider<MyCurrencyModelFactory> factoryProvider;

  public HomeFragment_MembersInjector(Provider<MyCurrencyModelFactory> factoryProvider) {
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<HomeFragment> create(
      Provider<MyCurrencyModelFactory> factoryProvider) {
    return new HomeFragment_MembersInjector(factoryProvider);
  }

  @Override
  public void injectMembers(HomeFragment instance) {
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.visualdx.codechallenge.fragments.HomeFragment.factory")
  public static void injectFactory(HomeFragment instance, MyCurrencyModelFactory factory) {
    instance.factory = factory;
  }
}
